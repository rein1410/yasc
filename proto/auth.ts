// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.27.1
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface pTokenResponse {
  accessToken: string;
}

export interface pLoginDto {
  email: string;
  password: string;
}

export interface pRegisterDto {
  email: string;
  username: string;
  password: string;
}

export interface pUserPaginationDto {
  limit: number;
  skip: number;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  login(request: pLoginDto): Observable<pTokenResponse>;

  register(request: pRegisterDto): Observable<pTokenResponse>;
}

export interface AuthServiceController {
  login(request: pLoginDto): Promise<pTokenResponse> | Observable<pTokenResponse> | pTokenResponse;

  register(request: pRegisterDto): Promise<pTokenResponse> | Observable<pTokenResponse> | pTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "register"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
